/* ************************************************************************ *******************  CANADIAN ASTRONOMY DATA CENTRE  ******************* **************  CENTRE CANADIEN DE DONNÉES ASTRONOMIQUES  ************** * *  (c) 2020.                            (c) 2020. *  Government of Canada                 Gouvernement du Canada *  National Research Council            Conseil national de recherches *  Ottawa, Canada, K1A 0R6              Ottawa, Canada, K1A 0R6 *  All rights reserved                  Tous droits réservés * *  NRC disclaims any warranties,        Le CNRC dénie toute garantie *  expressed, implied, or               énoncée, implicite ou légale, *  statutory, of any kind with          de quelque nature que ce *  respect to the software,             soit, concernant le logiciel, *  including without limitation         y compris sans restriction *  any warranty of merchantability      toute garantie de valeur *  or fitness for a particular          marchande ou de pertinence *  purpose. NRC shall not be            pour un usage particulier. *  liable in any event for any          Le CNRC ne pourra en aucun cas *  damages, whether direct or           être tenu responsable de tout *  indirect, special or general,        dommage, direct ou indirect, *  consequential or incidental,         particulier ou général, *  arising from the use of the          accessoire ou fortuit, résultant *  software.  Neither the name          de l'utilisation du logiciel. Ni *  of the National Research             le nom du Conseil National de *  Council of Canada nor the            Recherches du Canada ni les noms *  names of its contributors may        de ses  participants ne peuvent *  be used to endorse or promote        être utilisés pour approuver ou *  products derived from this           promouvoir les produits dérivés *  software without specific prior      de ce logiciel sans autorisation *  written permission.                  préalable et particulière *                                       par écrit. * *  This file is part of the             Ce fichier fait partie du projet *  OpenCADC project.                    OpenCADC. * *  OpenCADC is free software:           OpenCADC est un logiciel libre ; *  you can redistribute it and/or       vous pouvez le redistribuer ou le *  modify it under the terms of         modifier suivant les termes de *  the GNU Affero General Public        la “GNU Affero General Public *  License as published by the          License” telle que publiée *  Free Software Foundation,            par la Free Software Foundation *  either version 3 of the              : soit la version 3 de cette *  License, or (at your option)         licence, soit (à votre gré) *  any later version.                   toute version ultérieure. * *  OpenCADC is distributed in the       OpenCADC est distribué *  hope that it will be useful,         dans l’espoir qu’il vous *  but WITHOUT ANY WARRANTY;            sera utile, mais SANS AUCUNE *  without even the implied             GARANTIE : sans même la garantie *  warranty of MERCHANTABILITY          implicite de COMMERCIALISABILITÉ *  or FITNESS FOR A PARTICULAR          ni d’ADÉQUATION À UN OBJECTIF *  PURPOSE.  See the GNU Affero         PARTICULIER. Consultez la Licence *  General Public License for           Générale Publique GNU Affero *  more details.                        pour plus de détails. * *  You should have received             Vous devriez avoir reçu une *  a copy of the GNU Affero             copie de la Licence Générale *  General Public License along         Publique GNU Affero avec *  with OpenCADC.  If not, see          OpenCADC ; si ce n’est *  <http://www.gnu.org/licenses/>.      pas le cas, consultez : *                                       <http://www.gnu.org/licenses/>. * ************************************************************************ */package org.opencadc.critwall;import java.io.ByteArrayOutputStream;import java.io.File;import java.nio.file.Files;import java.nio.file.Paths;import java.nio.file.attribute.FileAttribute;import java.nio.file.attribute.PosixFilePermission;import java.nio.file.attribute.PosixFilePermissions;import java.util.Set;import org.apache.log4j.Level;import org.apache.log4j.Logger;import org.junit.Before;import org.opencadc.inventory.StorageLocation;import org.opencadc.inventory.db.ArtifactDAO;import org.opencadc.inventory.storage.fs.FileSystemStorageAdapter;import org.opencadc.inventory.storage.fs.FileSystemStorageAdapter.BucketMode;import ca.nrc.cadc.util.Log4jInit;import java.net.URI;import org.apache.log4j.Level;import org.apache.log4j.Logger;import org.junit.Assert;import org.junit.Before;import org.junit.Test;import org.opencadc.inventory.storage.StorageAdapter;public class FileSyncJobTest {    private static final Logger log = Logger.getLogger(FileSyncJobTest.class);    private static final String TEST_ROOT = "build/tmp/fsroot";    private static final String TEST_FILE = "/CADCtest/cadcUrlList.txt";    private static final String VOS_RESOURCE_ID = "ivo://cadc.nrc.ca/vospace";    static {        Log4jInit.setLevel("org.opencadc.inventory", Level.INFO);        Log4jInit.setLevel("org.opencadc.inventory.db", Level.INFO);        Log4jInit.setLevel("ca.nrc.cadc.db", Level.INFO);        Log4jInit.setLevel("org.opencadc.critwall", Level.DEBUG);        Log4jInit.setLevel("org.opencadc.inventory.storage.fs", Level.DEBUG);    }    ArtifactDAO dao = new ArtifactDAO();    ArtifactDAO alt = new ArtifactDAO();    public FileSyncJobTest() throws Exception {        try {//                DBConfig dbrc = new DBConfig();//                ConnectionConfig cc = dbrc.getConnectionConfig(TestUtil.SERVER, TestUtil.DATABASE);//                DBUtil.createJNDIDataSource("jdbc/ArtifactDAOTest", cc);////                Map<String,Object> config = new TreeMap<String,Object>();//                config.put(SQLGenerator.class.getName(), SQLGenerator.class);//                config.put("jndiDataSourceName", "jdbc/ArtifactDAOTest");//                config.put("database", TestUtil.DATABASE);//                config.put("schema", TestUtil.SCHEMA);//                dao.setConfig(config);////                DBUtil.createJNDIDataSource("jdbc/ArtifactDAOTest-alt", cc);//                Map<String,Object> altConfig = new TreeMap<String,Object>();//                altConfig.put(SQLGenerator.class.getName(), SQLGenerator.class);//                altConfig.put("jndiDataSourceName", "jdbc/ArtifactDAOTest-alt");//                altConfig.put("database", TestUtil.DATABASE);//                altConfig.put("schema", TestUtil.SCHEMA);//                alt.setConfig(altConfig);        } catch (Exception ex) {            log.error("setup failed", ex);            throw ex;        }    }    @Before    public void init_cleanup() throws Exception {        log.info("init database...");        // Will need to do this after critwall test database container is set up        // Have this ben a specifically named container, named in .dbrc,        // separate from the normal critwall container (which would be named in it's        // properties file//            InitDatabase init = new InitDatabase(dao.getDataSource(), TestUtil.DATABASE, TestUtil.SCHEMA);//            init.doInit();//            log.info("init database... OK");////            log.info("clearing old content...");//            SQLGenerator gen = dao.getSQLGenerator();//            DataSource ds = dao.getDataSource();//            String sql = "delete from " + gen.getTable(Artifact.class);//            log.info("pre-test cleanup: " + sql);//            ds.getConnection().createStatement().execute(sql);//            log.info("clearing old content... OK");    }    @Test    public void testJob() throws Exception {        BucketMode bucketMode = FileSystemStorageAdapter.BucketMode.URI;        log.info("testJob(" + bucketMode + ") - start");        // Create the test directory the fs stoerage adapter needs        String testDir = TEST_ROOT + File.separator + "testJob-" + bucketMode;        Set<PosixFilePermission> perms = PosixFilePermissions.fromString("rwxrwxrw-");        FileAttribute<Set<PosixFilePermission>> attr = PosixFilePermissions.asFileAttribute(perms);        Files.createDirectories(Paths.get(testDir), attr);        // needs: artifactID (of the file to retrieve)        //resourceID (of the transfer negotiation service)        //StorageAdapter instance (to write the file)        //ArtifactDAO (to update the artifact with the resulting StorageLocation)//        URI artifactID = new URI("cadc:test/path");//        URI artifactID = new URI("vos://cadc.nrc.ca~vault/CADCtest/cadcUrlList.txt");        URI artifactID = new URI("vos://cadc.nrc.ca!vault/CADCtest/group.xml");//        URI resourceID = new URI("ivo://cadc.nrc.ca/raven");        // create a file in vospace        URI resourceID = new URI("ivo://cadc.nrc.ca/raven");        URI storageID = URI.create("test:path/file");        StorageLocation sl = new StorageLocation(storageID);        ByteArrayOutputStream dest = new ByteArrayOutputStream();        FileSystemStorageAdapter sa = new FileSystemStorageAdapter(testDir, bucketMode, 1);        ArtifactDAO ad = new ArtifactDAO();        FileSyncJob fsj = new FileSyncJob(artifactID, resourceID, sa, ad);        fsj.run();        log.debug("ended");        // assert that job succeeded//            ...        // check that artifact in db has storage location//            ...        // check for file on disk//            ...    }}