/* ************************************************************************ *******************  CANADIAN ASTRONOMY DATA CENTRE  ******************* **************  CENTRE CANADIEN DE DONNÉES ASTRONOMIQUES  ************** * *  (c) 2020.                            (c) 2020. *  Government of Canada                 Gouvernement du Canada *  National Research Council            Conseil national de recherches *  Ottawa, Canada, K1A 0R6              Ottawa, Canada, K1A 0R6 *  All rights reserved                  Tous droits réservés * *  NRC disclaims any warranties,        Le CNRC dénie toute garantie *  expressed, implied, or               énoncée, implicite ou légale, *  statutory, of any kind with          de quelque nature que ce *  respect to the software,             soit, concernant le logiciel, *  including without limitation         y compris sans restriction *  any warranty of merchantability      toute garantie de valeur *  or fitness for a particular          marchande ou de pertinence *  purpose. NRC shall not be            pour un usage particulier. *  liable in any event for any          Le CNRC ne pourra en aucun cas *  damages, whether direct or           être tenu responsable de tout *  indirect, special or general,        dommage, direct ou indirect, *  consequential or incidental,         particulier ou général, *  arising from the use of the          accessoire ou fortuit, résultant *  software.  Neither the name          de l'utilisation du logiciel. Ni *  of the National Research             le nom du Conseil National de *  Council of Canada nor the            Recherches du Canada ni les noms *  names of its contributors may        de ses  participants ne peuvent *  be used to endorse or promote        être utilisés pour approuver ou *  products derived from this           promouvoir les produits dérivés *  software without specific prior      de ce logiciel sans autorisation *  written permission.                  préalable et particulière *                                       par écrit. * *  This file is part of the             Ce fichier fait partie du projet *  OpenCADC project.                    OpenCADC. * *  OpenCADC is free software:           OpenCADC est un logiciel libre ; *  you can redistribute it and/or       vous pouvez le redistribuer ou le *  modify it under the terms of         modifier suivant les termes de *  the GNU Affero General Public        la “GNU Affero General Public *  License as published by the          License” telle que publiée *  Free Software Foundation,            par la Free Software Foundation *  either version 3 of the              : soit la version 3 de cette *  License, or (at your option)         licence, soit (à votre gré) *  any later version.                   toute version ultérieure. * *  OpenCADC is distributed in the       OpenCADC est distribué *  hope that it will be useful,         dans l’espoir qu’il vous *  but WITHOUT ANY WARRANTY;            sera utile, mais SANS AUCUNE *  without even the implied             GARANTIE : sans même la garantie *  warranty of MERCHANTABILITY          implicite de COMMERCIALISABILITÉ *  or FITNESS FOR A PARTICULAR          ni d’ADÉQUATION À UN OBJECTIF *  PURPOSE.  See the GNU Affero         PARTICULIER. Consultez la Licence *  General Public License for           Générale Publique GNU Affero *  more details.                        pour plus de détails. * *  You should have received             Vous devriez avoir reçu une *  a copy of the GNU Affero             copie de la Licence Générale *  General Public License along         Publique GNU Affero avec *  with OpenCADC.  If not, see          OpenCADC ; si ce n’est *  <http://www.gnu.org/licenses/>.      pas le cas, consultez : *                                       <http://www.gnu.org/licenses/>. * *  $Revision: 4 $ * ************************************************************************ */package org.opencadc.inventory.storage.ad;import ca.nrc.cadc.auth.AuthMethod;import ca.nrc.cadc.auth.AuthenticationUtil;import ca.nrc.cadc.net.StorageResolver;import ca.nrc.cadc.net.Traceable;import ca.nrc.cadc.reg.Standards;import ca.nrc.cadc.reg.client.RegistryClient;import java.net.MalformedURLException;import java.net.URI;import java.net.URISyntaxException;import java.net.URL;import org.apache.log4j.Logger;/** * Fork of AdResolver from caom2-artifact-resolver library. Maintained so the original can be modified * in future to point to a different storage location, while the AdStorageAdapter can maintain reference * to the original storage location. * * StorageResolver implementation for the Archive Directory (ad) system. This class can convert an AD URI into a URL. This is an alternate version that uses the * RegistryClient to find the data web service base URL. * * @author pdowler */public class AdArtifactResolver implements StorageResolver, Traceable {    public static final String SCHEME = "ad";    private static final Logger log = Logger.getLogger(AdArtifactResolver.class);    private static final String DATA_URI = "ivo://cadc.nrc.ca/data";    protected AuthMethod authMethod;    @Override    public URL toURL(URI uri) {        if (!SCHEME.equals(uri.getScheme())) {            throw new IllegalArgumentException("invalid scheme in " + uri);        }        try {            String path = getPath(uri);                        // check if authMethod has been set            AuthMethod am = this.authMethod;            if (am == null) {                am = AuthenticationUtil.getAuthMethod(AuthenticationUtil.getCurrentSubject());            }            if (am == null) {                am = AuthMethod.ANON;            }                        RegistryClient rc = new RegistryClient();            URL serviceURL = rc.getServiceURL(new URI(DATA_URI), Standards.DATA_10, am);            URL url = this.toURL(serviceURL, path);            log.debug(uri + " --> " + url);            return url;        } catch (MalformedURLException ex) {            throw new RuntimeException("BUG", ex);        } catch (URISyntaxException bug) {            throw new RuntimeException("BUG - failed to create data web service URI", bug);        }    }    protected URL toURL(URL serviceURL, String path) throws MalformedURLException {        return new URL(serviceURL.toExternalForm() + path);    }    public void setAuthMethod(AuthMethod authMethod) {        this.authMethod = authMethod;    }    @Override    public String getScheme() {        return SCHEME;    }    private String getPath(URI uri) {        String[] path = uri.getSchemeSpecificPart().split("/");        if (path.length != 2) {            throw new IllegalArgumentException("malformed AD URI, expected 2 path componets, found " + path.length);        }        String arc = path[0];        String fid = path[1];        StringBuilder sb = new StringBuilder();        sb.append("/");        sb.append(arc);        sb.append("/");        sb.append(fid);        return sb.toString();    }}