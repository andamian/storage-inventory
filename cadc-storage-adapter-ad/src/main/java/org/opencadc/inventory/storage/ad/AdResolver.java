import ca.nrc.cadc.auth.AuthMethod;import ca.nrc.cadc.auth.AuthenticationUtil;import ca.nrc.cadc.net.StorageResolver;import ca.nrc.cadc.net.Traceable;import ca.nrc.cadc.reg.Standards;import ca.nrc.cadc.reg.client.RegistryClient;import java.net.MalformedURLException;import java.net.URI;import java.net.URISyntaxException;import java.net.URL;import org.apache.log4j.Logger;/** * Fork of AdResolver from caom2-artifact-resolver library. Maintained so the original can be modified * in future to point to a different storage location, while the AdStorageAdapter can maintain reference * to the original ad. * * StorageResolver implementation for the Archive Directory (ad) system. This class can convert an AD URI into a URL. This is an alternate version that uses the * RegistryClient to find the data web service base URL. * * @author pdowler */public class AdResolver implements StorageResolver, Traceable {    public static final String SCHEME = "ad";    private static final Logger log = Logger.getLogger(AdResolver.class);    private static final String DATA_URI = "ivo://cadc.nrc.ca/data";    protected AuthMethod authMethod;    @Override    public URL toURL(URI uri) {        if (!SCHEME.equals(uri.getScheme())) {            throw new IllegalArgumentException("invalid scheme in " + uri);        }        try {            String path = getPath(uri);                        // check if authMethod has been set            AuthMethod am = this.authMethod;            if (am == null) {                am = AuthenticationUtil.getAuthMethod(AuthenticationUtil.getCurrentSubject());            }            if (am == null) {                am = AuthMethod.ANON;            }                        RegistryClient rc = new RegistryClient();            URL serviceURL = rc.getServiceURL(new URI(DATA_URI), Standards.DATA_10, am);            URL url = this.toURL(serviceURL, path);            log.debug(uri + " --> " + url);            return url;        } catch (MalformedURLException ex) {            throw new RuntimeException("BUG", ex);        } catch (URISyntaxException bug) {            throw new RuntimeException("BUG - failed to create data web service URI", bug);        }    }    protected URL toURL(URL serviceURL, String path) throws MalformedURLException {        return new URL(serviceURL.toExternalForm() + path);    }    public void setAuthMethod(AuthMethod authMethod) {        this.authMethod = authMethod;    }    @Override    public String getScheme() {        return SCHEME;    }    private String getPath(URI uri) {        String[] path = uri.getSchemeSpecificPart().split("/");        if (path.length != 2) {            throw new IllegalArgumentException("malformed AD URI, expected 2 path componets, found " + path.length);        }        String arc = path[0];        String fid = path[1];        StringBuilder sb = new StringBuilder();        sb.append("/");        sb.append(arc);        sb.append("/");        sb.append(fid);        return sb.toString();    }}